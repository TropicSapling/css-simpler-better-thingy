%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
version: 2
name: CSS--
file_extensions:
  - cssmm
scope: source.css
variables:
  # Identifiers
  identifier: '(?:(?:[[:alpha:]][_\-[:alnum:]]*|_[_[:alnum:]]+)\b)' # include a word boundary at the end to ensure all possible characters are consumed, to prevent catastrophic backtracking

  # Keywords
  keywords: '(include)'

  # Declarations
  decl_sym: '(decl(\s+(sym(indies|block)))|enclosed\s+by|with\s+escaper)'

  # Numbers
  digits:  '(0(x[0-9a-fA-F_]+|o[0-7_]+|b[01_]+)|[0-9_]+)'
  numbers: '(-)?{{digits}}(\.{{digits}})?([iu](8|16|32|64|128|size)|f(loat)?(32|64))?'

  # Misc.
  escaped_byte: '\\(x\h{2}|n|r|t|0|"|''|\\)'
  escaped_char: '\\(x\h{2}|n|r|t|0|"|''|\\|u\{\h{1,6}\})'
contexts:
  main:
    - include: general

  ################################################################################
  ##                                                                            ##
  ##                   ========  BASICALLY UNIVERSAL  ========                  ##
  ##                                                                            ##
  ################################################################################

  universal:
    - match: '\\.'
      scope: constant.character.escape.css
    - include: comments

  ################################################################################
  ##                                                                            ##
  ##                   ==============  GENERAL  ==============                  ##
  ##                                                                            ##
  ################################################################################

  general:
    - include: universal

    # Strings
    - match: '"'
      scope: punctuation.definition.string.begin.css
      push: double-quoted-string

    # Keywords
    - match: '\b{{keywords}}\b'
      scope: keyword.control.css

    - match: '\b[A-Z]{{identifier}}?'
      scope: constant.language.css

    # Numbers
    - match: '\b{{numbers}}\b'
      scope: constant.numeric.css

    # Operators
    - include: operators

    # Punctuation
    - include: punctuation

    # Blocks & groups
    - match: '(?=\{)'
      push: block

    - match: '(?=\()'
      push: group

    - match: '\['
      scope: punctuation.section.group.begin.css
      push:
        - meta_scope: meta.group.css
        - match: '\]'
          scope: punctuation.section.group.end.css
          pop: true
        - include: general

    # Declarations & definitions
    # TODO ...

  ################################################################################
  ##                                                                            ##
  ##                   =============  COMMENTS  =============                   ##
  ##                                                                            ##
  ################################################################################

  cleared-line-comments:
    # Line comments, but scopes are cleared and contents ignored
    - match: '^(?=\s*//+(\s*>)?)'
      push:
        - clear_scopes: true
        - match: '\s*(//+)(\s*>)?'
          captures:
            1: source.css comment.line.css
            2: source.css comment.line.css markup.bold
          pop: true

  block-comments:
    - match: '/\*'
      scope: punctuation.definition.comment.css
      push: block-comment
  
  comment:
    # Common syntax for all comments (excl. /* block comments */)
    - match: '^(?!\s*//+)'
      pop: true
    - match: 'TODO[:.!]?'
      scope: cc.support.function.css

  line-comment:
    - meta_scope: comment.line.css
    - include: comment

  block-comment:
    # Currently, these comments don't support any advanced features
    - meta_scope: comment.block.css
    - match: '\*/'
      scope: punctuation.definition.comment.css
      pop: true
    - include: block-comments

  comments:
    - include: line-comments
    - include: block-comments

  line-comments:
    - match: '(?=//(?!/))' # regular comments
      scope: punctuation.definition.comment.css
      push: line-comment
    - match: '(?=///+)' # doc comments
      scope: punctuation.definition.comment.css
      push: doc-comment

  comment-markdown:
    # \Escaping
    - match: '\\.'
      scope: cc.constant.character.escape.css

    # *Italic*
    - match: '\*(?!\*)|\*(?=\*\*)'
      scope: markup.bold
      push:
        - meta_scope: markup.italic
        - match: '\*(?!\*)'
          scope: markup.bold
          pop: true
        - include: cleared-line-comments
        - include: doc-comment

    # **Bold**
    - match: '\*\*'
      scope: markup.bold
      push:
        - meta_scope: markup.bold
        - match: '\*\*'
          scope: markup.bold
          pop: true
        - include: cleared-line-comments
        - include: doc-comment

    # "Quotes"
    - match: '///+\s*(")'
      captures:
        1: markup.bold markup.italic
      push:
        - meta_content_scope: markup.italic
        - match: '"'
          scope: markup.bold markup.italic
          pop: true
        - include: cleared-line-comments
        - include: doc-comment

    # Headings
    - match: '///+\s*(#)(?!#)(.*)$'
      captures:
        1: markup.heading.1 cc.punctuation.definition.heading
        2: comment.line.css markup.bold
    - match: '///+\s*(#{2,6})(?!#)(.*)$'
      captures:
        1: markup.heading cc.punctuation.definition.heading
        2: comment.line.css markup.bold

  doc-comment:
    - meta_scope: comment.line.css
    - include: comment
    - include: comment-markdown # only doc comments support markdown


  ################################################################################
  ##                                                                            ##
  ##                   ============  PUNCTUATION  ============                  ##
  ##                                                                            ##
  ################################################################################

  punctuation:
    - match: ';'
      scope: punctuation.terminator.css
    - match: '[:,]'
      scope: punctuation.separator.css
    - match: '\.'
      scope: punctuation.accessor.dot.css

  ################################################################################
  ##                                                                            ##
  ##                   ==============  STRINGS  ==============                  ##
  ##                                                                            ##
  ################################################################################

  double-quoted-string:
    - meta_scope: string.quoted.double.css
    - match: '\\.'
      scope: constant.character.escape.css
    - match: '"'
      scope: punctuation.definition.string.end.css
      pop: true

  ################################################################################
  ##                                                                            ##
  ##                   =============  OPERATORS  =============                  ##
  ##                                                                            ##
  ################################################################################

  operators:
    - match: '[$]'
      scope: keyword.operator.css
      push: op-dollar
    - match: '\b_\b'
      scope: keyword.operator.css

  op-dollar:
    - include: universal
    - match: '{{identifier}}'
      scope: variable.parameter.css
      pop: true
    - match: ''
      pop: true

  ################################################################################
  ##                                                                            ##
  ##                   ==========  BLOCKS & GROUPS  ==========                  ##
  ##                                                                            ##
  ################################################################################

  block:
    - match: '\}'
      scope: meta.block.css punctuation.section.block.end.css
      pop: true
    - match: '\{'
      scope: punctuation.section.block.begin.css
      push: [block-body]

  block-body:
    - meta_scope: meta.block.css
    - match: '(?=\})'
      pop: true
    - include: general

  group:
    - match: '\)'
      scope: meta.group.css punctuation.section.group.end.css
      pop: true
    - match: '\('
      scope: punctuation.section.group.begin.css
      push: [group-body]

  group-body:
    - meta_scope: meta.group.css
    - match: '(?=\))'
      pop: true
    - include: general

  ################################################################################
  ##                                                                            ##
  ##                   ====  DECLARATIONS & DEFINITIONS  ====                   ##
  ##                                                                            ##
  ################################################################################

  # TODO ...
